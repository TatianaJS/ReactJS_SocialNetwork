{"version":3,"file":"static/js/571.f349a860.chunk.js","mappings":"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","sources":["webpack://my-app/./src/css/Profile/ProfileInfo/ProfileInfo.module.css?6a95","webpack://my-app/./src/css/Profile/ProfileInfo/ProfileStatus.module.css?b3d8","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/css/Profile/MyPosts/Post.module.css?fc82","components/Profile/MyPosts/Post.jsx","webpack://my-app/./src/css/Profile/MyPosts/MyPost.module.css?9f70","components/Profile/MyPosts/MyPost.jsx","components/Profile/MyPosts/MyPostContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"top_img\":\"ProfileInfo_top_img__mE3rB\",\"avatar\":\"ProfileInfo_avatar__mPI1M\",\"info\":\"ProfileInfo_info__6syOr\",\"fio\":\"ProfileInfo_fio__rZlZ6\",\"data\":\"ProfileInfo_data__CnqZf\",\"profile__fio\":\"ProfileInfo_profile__fio__8S-yy\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile_status\":\"ProfileStatus_profile_status__3cExP\",\"profile_status__input\":\"ProfileStatus_profile_status__input__pysrj\"};","import React, { useEffect, useState } from 'react';\r\nimport classes from '../../../css/Profile/ProfileInfo/ProfileStatus.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div className={ classes.profile_status }>\r\n                    <span onDoubleClick={ onEditMode }>\r\n                        { props.status || '–' }\r\n                    </span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div className={ classes.profile_status__input }>\r\n                    <input \r\n                        autoFocus={ true }\r\n                        onBlur={ offEditMode }\r\n                        onChange={ onStatusChange }\r\n                        value={ status } />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from '../../../css/Profile/ProfileInfo/ProfileInfo.module.css';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport noPhoto from '../../../assets/img/no-photo.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className={classes.top_img}>\r\n                <img \r\n                    src=\"https://avatars.dzeninfra.ru/get-zen_doc/196027/pub_5cb2e7b9c07b6700b34e992c_5cb2ebb66749e800b419fc58/scale_2400\" \r\n                    alt=''/>\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n            <div className={classes.info}>\r\n                <div className={classes.avatar}>\r\n                    <img \r\n                        src={props.profile.photos.large !== null ? props.profile.photos.large : noPhoto} \r\n                        alt='' \r\n                        className={classes.user_photo} />\r\n                </div>\r\n                <div className={classes.data}>\r\n                    <div className={classes.fio}>\r\n                        {props.profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        { props.profile.aboutMe !== null \r\n                        ? <span><b>Обо мне:</b> {props.profile.aboutMe}</span> \r\n                        : ''}\r\n                        <span><b>Ищу работу:</b> {props.profile.lookingForAJob ? 'Да' : 'Нет'}</span>\r\n                        { props.profile.lookingForAJobDescription !== null \r\n                        ? <span><b>Описание работы:</b> {props.profile.lookingForAJobDescription}</span> \r\n                        : ''}\r\n                        <span>\r\n                            <b>Контакты: </b>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Post_posts__Z-9AK\",\"item\":\"Post_item__rUzkX\",\"like\":\"Post_like__sV4zY\"};","import React from 'react';\r\nimport classes from '../../../css/Profile/MyPosts/Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={classes.posts}>\r\n            <div className={classes.item}>\r\n                <img src=\"./img/avatar_1.png\" alt='' />\r\n                {props.message}\r\n                <span className={classes.like}>\r\n                    {props.likes}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"entries\":\"MyPost_entries__uf0eo\"};","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport Post from '../MyPosts/Post';\r\nimport classes from '../../../css/Profile/MyPosts/MyPost.module.css';\r\nimport { Textarea } from '../../../utils/FormControls/FormControls';\r\nimport { requiredField, maxLengthCreator } from '../../../utils/Validators/Validators';\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsEls = props.posts.map(msg => <Post message={ msg.message } likes={ msg.likes } key={ msg.id } />);\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={ classes.entries }>\r\n            <p>My posts</p>\r\n            <AddPostFormReduxForm onSubmit={ addNewPost } />\r\n            { postsEls }\r\n        </div>\r\n    );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={ props.handleSubmit }>\r\n                <Field \r\n                    component={Textarea}\r\n                    name='newPost'\r\n                    placeholder='Введите сообщение'\r\n                    validate={[requiredField, maxLength10]} />\r\n                <button type='submit'>\r\n                    Отправить\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddPostFormReduxForm = reduxForm({form: 'addPost'})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPost';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.pageProfile.postsDt,\r\n        newPostText: state.pageProfile.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        /*addPost: (newPost) => {\r\n            dispatch(addPostActionCreator(newPost));\r\n        }*/\r\n        addPost: (text) => {\r\n            dispatch(addPostActionCreator(text));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n                profile={ props.userProfile } \r\n                status={ props.status } \r\n                updateStatus={ props.updateStatus } />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getUserStatus, updateUserStatus } from '../../redux/profileReducer';\r\n\r\nexport function withRouter(Children) {\r\n    return(props) => {\r\n        const match = { params: useParams() };\r\n        return <Children {...props} match={match} />\r\n    }\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) return <Navigate to='/auth' />    \r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile \r\n                    { ...this.props } \r\n                    userProfile={ this.props.userProfile } \r\n                    status={ this.props.status} \r\n                    updateStatus={ this.props.updateUserStatus } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userProfile: state.pageProfile.userProfile,\r\n        status: state.pageProfile.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuthorized: state.auth.isAuthorized\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter\r\n)(ProfileContainer);"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","className","classes","onDoubleClick","onEditMode","autoFocus","onBlur","offEditMode","updateStatus","onChange","e","currentTarget","value","profile","top_img","src","alt","ProfileStatusWithHooks","info","avatar","photos","large","noPhoto","user_photo","data","fio","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","message","likes","MyPosts","React","postsEls","posts","map","msg","Post","id","AddPostFormReduxForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","type","connect","state","pageProfile","postsDt","dispatch","text","addPostActionCreator","ProfileInfo","userProfile","MyPostsContainer","withRouter","Children","match","params","useParams","ProfileContainer","componentDidMount","userId","this","authorizedUserId","Navigate","to","getUserProfile","getUserStatus","render","Profile","updateUserStatus","compose","auth","isAuthorized"],"sourceRoot":""}
{"ast":null,"code":"import { stopSubmit } from 'redux-form';\nimport { authAPI, securityAPI } from '../api/api';\nimport axios from 'axios';\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuthorized: false,\n  captchaUrl: null\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n//dispatch\nexport const setAuthUserData = (userId, email, login, isAuthorized, captchaUrl) => ({\n  type: SET_AUTH_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuthorized,\n    captchaUrl\n  }\n});\nexport const getCaptchaURLSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\n\n//thunk\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.auth();\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, login, email, true));\n  }\n};\nexport const Authorization = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.singIn(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      //dispatch(getCaptchaURLSuccess());\n    }\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Error!';\n    dispatch(stopSubmit('signIn', {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaURL = () => async dispatch => {\n  //let response = await securityAPI.getCaptchaURL();\n  axios.get('https://social-network.samuraijs.com/api/1.0/security/get-captcha-url').then(response => {\n    const captchaUrl = response.data.url;\n  });\n  //const captchaUrl = response.data.url;\n  //dispatch(getCaptchaURLSuccess(captchaUrl));\n};\nexport const logingOut = () => async dispatch => {\n  let response = await authAPI.singOut();\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false, null));\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["stopSubmit","authAPI","securityAPI","axios","SET_AUTH_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuthorized","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaURLSuccess","getAuthUserData","dispatch","response","auth","data","resultCode","id","Authorization","password","rememberMe","captcha","singIn","message","messages","length","_error","getCaptchaURL","get","then","url","logingOut","singOut"],"sources":["C:/Work/React/studying/my-app/src/redux/authReducer.js"],"sourcesContent":["import { stopSubmit } from 'redux-form';\r\nimport { authAPI, securityAPI } from '../api/api';\r\nimport axios from 'axios';\r\n\r\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuthorized: false,\r\n    captchaUrl: null\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//dispatch\r\nexport const setAuthUserData = (userId, email, login, isAuthorized, captchaUrl) => ({\r\n    type: SET_AUTH_USER_DATA, \r\n    payload: {userId, email, login, isAuthorized, captchaUrl}\r\n});\r\n\r\nexport const getCaptchaURLSuccess = (captchaUrl) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, \r\n    payload: {captchaUrl}\r\n});\r\n\r\n//thunk\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.auth();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, login, email, true));\r\n    }\r\n}\r\n\r\nexport const Authorization = (email, password, rememberMe, captcha) => async (dispatch) => {\r\n    let response = await authAPI.singIn(email, password, rememberMe, captcha);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if(response.data.resultCode === 10) {\r\n            //dispatch(getCaptchaURLSuccess());\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Error!';\r\n        dispatch(stopSubmit('signIn', {\r\n            _error: message\r\n        }));\r\n    }\r\n}\r\n\r\nexport const getCaptchaURL = () => async (dispatch) => {\r\n    //let response = await securityAPI.getCaptchaURL();\r\n    axios.get('https://social-network.samuraijs.com/api/1.0/security/get-captcha-url').then(response => {\r\n        const captchaUrl = response.data.url;\r\n    })\r\n    //const captchaUrl = response.data.url;\r\n    //dispatch(getCaptchaURLSuccess(captchaUrl));\r\n}\r\n\r\nexport const logingOut = () => async (dispatch) => {\r\n    let response = await authAPI.singOut();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false, null));\r\n    }\r\n}\r\n\r\nexport default authReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
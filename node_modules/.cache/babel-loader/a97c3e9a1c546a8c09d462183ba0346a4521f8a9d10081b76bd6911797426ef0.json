{"ast":null,"code":"import { usersAPI } from '../api/api';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        /*users: state.users.map(u => {\r\n            if (u.id === action.userId) {\r\n                return {...u, followed: true}\r\n            }\r\n            return u;\r\n        })*/\n        users: updateObjectInArray\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return {\n              ...u,\n              followed: false\n            };\n          }\n          return u;\n        })\n      };\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.users\n      };\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage\n      };\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalUsersCount: action.totalCount\n      };\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching\n      };\n    case TOGGLE_FOLLOWING_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n      };\n    default:\n      return state;\n  }\n  ;\n};\n\n//dispatch\nexport const affirmFollow = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const affirmUnfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_COUNT,\n  totalCount: totalUsersCount\n});\nexport const setIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\n\n//thunk\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(setIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let data = await apiMethod(userId);\n  if (data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n  ;\n  dispatch(toggleFollowingProgress(false, userId));\n};\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), affirmFollow);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollowUser.bind(usersAPI), affirmUnfollow);\n  };\n};\nexport default usersReducer;","map":{"version":3,"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","updateObjectInArray","map","u","id","userId","followed","totalCount","filter","affirmFollow","affirmUnfollow","setUsers","setCurrentPage","setTotalUsersCount","setIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","data","getUsers","items","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","followUser","bind","unfollow","unfollowUser"],"sources":["C:/Work/React/studying/my-app/src/redux/usersReducer.js"],"sourcesContent":["import { usersAPI } from '../api/api';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })*/\r\n                users: updateObjectInArray\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching \r\n                    ? [...state.followingInProgress, action.userId] \r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n//dispatch\r\nexport const affirmFollow = (userId) => ({type: FOLLOW, userId});\r\nexport const affirmUnfollow = (userId) => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_COUNT, totalCount: totalUsersCount});\r\nexport const setIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_FOLLOWING_PROGRESS, isFetching, userId});\r\n\r\n//thunk\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n    \r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(setIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n};\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    };\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId) =>{\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), affirmFollow);\r\n    }\r\n};\r\n\r\nexport const unfollow = (userId) =>{\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollowUser.bind(usersAPI), affirmUnfollow);\r\n    }\r\n};\r\n\r\nexport default usersReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}